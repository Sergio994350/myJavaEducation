// Создайте класс компании Company, содержащей сотрудников и реализующей методы:
//найм одного сотрудника — hire(),
//найм списка сотрудников – hireAll(),
//увольнение сотрудника – fire(),
//получение значения дохода компании – getIncome().
//Аргументы и возвращаемое значение методов выберите на основании логики работы вашего приложения.
//Создайте два метода, возвращающие список указанной длины (count).
// Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:
//List<Employee> getTopSalaryStaff(int count),
//List<Employee> getLowestSalaryStaff(int count).

/*Для демонстрации и тестирования работы ваших классов:
Создайте и наймите в компанию:
180 операторов Operator, 80 менеджеров по продажам Manager, 10 топ-менеджеров TopManager.
Распечатайте список из 10–15 самых высоких зарплат в компании.
Распечатайте список из 30 самых низких зарплат в компании.
Увольте 50% сотрудников.
Распечатайте список из 10–15 самых высоких зарплат в компании.
Распечатайте список из 30 самых низких зарплат в компании. */
// (rework) Алгоритм решения верный. Прошу поля сделать до конструктора.
// Также будьте внимательнее, строки нельзя сравнивать через ==, так как это не примитивы.
// Например, здесь if (position == "TopManager") {

import java.util.*;

public class Company {

    public static double income; // доход компании
    public static int employeeCount = 0; // количество сотрудников
    public static ArrayList<EmployeeAbs> employeeList = new ArrayList<EmployeeAbs>();
    public static String name;
    public static double salary;
    public static String position = "";

    // общий доход компании
    public static double getIncome() {
        income = EmployeeAbs.companyIncome;
        return income;
    }

    // метод - уволить сотрудника
    public static void fire(int index) {
        Company.employeeList.remove(index);
    }

    // метод, выводящий список заданной длины длиной count с максимальной зарплатой
    public static void getTopSalaryStaff(int count) {
        Collections.sort(employeeList, Collections.reverseOrder());
        System.out.println("Список " + count + " сотрудников с максимальной зарплатой: ");
        for (int i = 0; i < count; i++) {
            System.out.println("" + (i + 1) + " " + employeeList.get(i).getName()
                    + " " + employeeList.get(i).getPosition()
                    + " " + employeeList.get(i).getMonthSalary());
        }
    }

    // метод для вывода списка сотрудников длиной count с минимальной зарплатой
    public static void getLowestSalaryStaff(int count) {
        Collections.sort(employeeList);
        System.out.println("Список " + count + " сотрудников с минимальной зарплатой: ");
        for (int i = 0; i < count; i++) {
            System.out.println("" + (i + 1) + " " + employeeList.get(i).getName()
                    + " " + employeeList.get(i).getPosition()
                    + " " + employeeList.get(i).getMonthSalary());
        }
    }

    // метод для вывода списка всех сотрудников
    public static void getAllEmployees() {
        System.out.println(employeeCount);
        for (int i = 0; i < employeeList.size(); i++) {
            System.out.println("" + (i + 1) + " " + employeeList.get(i).getName()
                    + " " + employeeList.get(i).getPosition()
                    + " " + employeeList.get(i).getMonthSalary());
        }
        System.out.println("Общее количество сотрудников: " + employeeCount + "\n");
    }


    // создадим генератор имен и фамилий
    public static String nameGenerator() {
        // зададим исходную базу для поиска имен и фамилий - самые популярные в России имена и фамилии
        String maleNames = "Александр Максим Михаил Артём Даниил Иван Дмитрий Кирилл Андрей Матвей Егор Илья Марк Тимофей Роман Никита Алексей Лев Владимир Фёдор Ярослав Константин Сергей Степан Николай Георгий Владислав Павел Арсений Тимур Глеб Мирон Григорий Давид Макар Денис Семён Евгений Платон Савелий Артемий Виктор Амир Леонид Пётр Руслан Богдан Игорь Юрий Василий Антон Захар Олег Демид Умар Мухаммад Артур Вячеслав Даниэль Адам Елисей Всеволод Роберт Лука Али Вадим Герман Святослав Филипп Дамир Тихон Борис Мирослав Станислав Гордей Родион Эмир Ян Эмиль Серафим Леон Ибрагим Алихан Юсуф Валерий Демьян Марсель Анатолий Яков Эмин Алинур Арсен Рамазан Марат Виталий Ислам Билал Тигран Муслим Имран "; // Всего символов: 678 Без пробелов: 579 Количество слов: 100
        String femaleNames = "София Мария Анна Виктория Алиса Анастасия Полина Елизавета Александра Дарья Варвара Екатерина Ксения Арина Ева Вероника Василиса Милана Валерия Ульяна Кира Вера Таисия Софья Маргарита Алёна Алина Мирослава Кристина Амина Диана Ольга Юлия Есения Ангелина Татьяна Стефания Евгения Эмилия Яна Майя Сафия Злата Ника Ирина Елена Амелия Агата Аделина Марьям Надежда Николь Дарина Элина Ясмина Камила Марина Ярослава Нина Светлана Милена Мия Алия Аиша Оливия Ариана Фатима Лидия Любовь Зоя Агния Малика Наталья Олеся Антонина Самира Мадина Карина Амира Лилия Айлин Серафима Марьяна Каролина Мелания Марианна Мира Марта Раяна Аврора Владислава Мила Сабина Лейла Валентина Алисия Евдокия Эмма Эвелина Асия "; // 697 символов - 691
        String maleFamilyNames = "Смирнов Иванов Кузнецов Соколов Попов Лебедев Козлов Новиков Морозов Петров Волков Соловьёв Васильев Зайцев Павлов Семёнов Голубев Виноградов Богданов Воробьёв Фёдоров Михайлов Беляев Тарасов Белов Комаров Орлов Киселёв Макаров Андреев Ковалёв Ильин Гусев Титов Кузьмин Кудрявцев Баранов Куликов Алексеев Степанов Яковлев Сорокин Сергеев Романов Захаров Борисов Королёв Герасимов Пономарёв Григорьев Лазарев Медведев Ершов Никитин Соболев Рябов Поляков Цветков Данилов Жуков Фролов Журавлёв Николаев Крылов Максимов Сидоров Осипов Белоусов Федотов Дорофеев Егоров Матвеев Бобров Дмитриев Калинин Анисимов Петухов Антонов Тимофеев Никифоров Веселов Филиппов Марков Большаков Суханов Миронов Ширяев Александров Коновалов Шестаков Казаков Ефимов Денисов Громов Фомин Давыдов Мельников Щербаков Блинов Колесников Карпов Афанасьев Власов Маслов Исаков Тихонов Аксёнов Гаврилов Родионов Котов Горбунов Кудряшов Быков Зуев Третьяков Савельев Панов Рыбаков Суворов Абрамов Воронов Мухин Архипов Трофимов Мартынов Емельянов Горшков Чернов Овчинников Селезнёв Панфилов Копылов Михеев Галкин Назаров Лобанов Лукин Беляков Потапов Некрасов Хохлов Жданов Наумов Шилов Воронцов Ермаков Дроздов Игнатьев Савин Логинов Сафонов Капустин Кириллов Моисеев Елисеев Кошелев Костин Горбачёв Орехов Ефремов Исаев Евдокимов Калашников Кабанов Носков Юдин Кулагин Лапин Прохоров Нестеров Харитонов Агафонов Муравьёв Ларионов Федосеев Зимин Пахомов Шубин Игнатов Филатов Крюков Рогов Кулаков Терентьев Молчанов Владимиров Артемьев Гурьев Зиновьев Гришин Кононов Дементьев Ситников Симонов Мишин Фадеев Комиссаров Мамонтов Носов Гуляев Шаров Устинов Вишняков Евсеев Лаврентьев Брагин Константинов Корнилов Авдеев Зыков Бирюков Шарапов Никонов Щукин Дьячков Одинцов Сазонов Якушев Красильников Гордеев Самойлов Князев Беспалов Уваров Шашков Бобылёв Доронин Белозёров Рожков Самсонов Мясников Лихачёв Буров Сысоев Фомичёв Русаков Стрелков Гущин Тетерин Колобов Субботин Фокин Блохин Селиверстов Пестов Кондратьев Силин Меркушев Лыткин Туров "; // 2012 символов - 2005
        String femaleFamilyNames = "Смирнова Иванова Кузнецова Соколова Попова Лебедева Козлова Новикова Морозова Петрова Волкова Соловьёва Васильева Зайцева Павлова Семёнова Голубева Виноградова Богданова Воробьёва Фёдорова Михайлова Беляева Тарасова Белова Комарова Орлова Киселёва Макарова Андреева Ковалёва Ильина Гусева Титова Кузьмина Кудрявцева Баранова Куликова Алексеева Степанова Яковлева Сорокина Сергеева Романова Захарова Борисова Королёва Герасимова Пономарёва Григорьева Лазарева Медведева Ершова Никитина Соболева Рябова Полякова Цветкова Данилова Жукова Фролова Журавлёва Николаева Крылова Максимова Сидорова Осипова Белоусова Федотова Дорофеева Егорова Матвеева Боброва Дмитриева Калинина Анисимова Петухова Антонова Тимофеева Никифорова Веселова Филиппова Маркова Большакова Суханова Миронова Ширяева Александрова Коновалова Шестакова Казакова Ефимова Денисова Громова Фомина Давыдова Мельникова Щербакова Блинова Колесникова Карпова Афанасьева Власова Маслова Исакова Тихонова Аксёнова Гаврилова Родионова Котова Горбунова Кудряшова Быкова Зуева Третьякова Савельева Панова Рыбакова Суворова Абрамова Воронова Мухина Архипова Трофимова Мартынова Емельянова Горшкова Чернова Овчинникова Селезнёва Панфилова Копылова Михеева Галкина Назарова Лобанова Лукина Белякова Потапова Некрасова Хохлова Жданова Наумова Шилова Воронцова Ермакова Дроздова Игнатьева Савина Логинова Сафонова Капустина Кириллова Моисеева Елисеева Кошелева Костина Горбачёва Орехова Ефремова Исаева Евдокимова Калашникова Кабанова Носкова Юдина Кулагина Лапина Прохорова Нестерова Харитонова Агафонова Муравьёва Ларионова Федосеева Зимина Пахомова Шубина Игнатова Филатова Крюкова Рогова Кулакова Терентьева Молчанова Владимирова Артемьева Гурьева Зиновьева Гришина Кононова Дементьева Ситникова Симонова Мишина Фадеева Комиссарова Мамонтова Носова Гуляева Шарова Устинова Вишнякова Евсеева Лаврентьева Брагина Константинова Корнилова Авдеева Зыкова Бирюкова Шарапова Никонова Щукина Дьячкова Одинцова Сазонова Якушева Красильникова Гордеева Самойлова Князева Беспалова Уварова Шашкова Бобылёва Доронина Белозёрова Рожкова Самсонова Мясникова Лихачёва Бурова Сысоева Фомичёва Русакова Стрелкова Гущина Тетерина Колобова Субботина Фокина Блохина Селиверстова Пестова Кондратьева Силина Меркушева Лыткина Турова "; // 2259 символов - 2251
        String[] maleNamesArray = maleNames.split(" ");
        String[] femaleNamesArray = femaleNames.split(" ");
        String[] maleFamilyNamesArray = maleFamilyNames.split(" ");
        String[] femaleFamilyNamesArray = femaleFamilyNames.split(" ");
        String nameAndFamily = "";
        int index1 = (int) (Math.random() * 100);
        int index2 = (int) (Math.random() * 250);
        boolean isMale = (Math.random() >= 0.5);
        if (isMale) {
            nameAndFamily = maleNamesArray[index1] + " " + maleFamilyNamesArray[index2];
        } else {
            nameAndFamily = femaleNamesArray[index1] + " " + femaleFamilyNamesArray[index2];
        }
        return nameAndFamily;
    }


    public static void main(String[] args) {
        employeeCount = 0; // общий счетчик сотрудников
        System.out.print("Сотрудник " + "\t" + "Позиция " + "\t" + "Зарплата " + "\n");

        // примем на работу 80 менеджеров, 10 топ менеджеров и 180 операторов:
        Manager managers = new Manager(name, salary, position);
        for (int i = 0; i < 80; i++) {
            managers.hire();
        }

        TopManager topManagers = new TopManager(name, salary, position);
        for (int i = 0; i < 10; i++) {
            topManagers.hire();
        }

        Operator operators = new Operator(name, salary, position);
        for (int i = 0; i < 180; i++) {
            operators.hire();
        }
        System.out.println(employeeCount);
        System.out.println(employeeList.size());
        System.out.println(Company.getIncome());

        // выведем список всех сотрудников
        getAllEmployees();

        // выведем список 15 самых высоких зарплат в компании
        getTopSalaryStaff(15);

        // Распечатаем список из 30 самых низких зарплат в компании.
        getLowestSalaryStaff(30);

        // уволим 50% сотрудников
        int temp = employeeList.size();
        for (int i = 0; i < temp / 2; i++) {
            fire(i);
            employeeCount--;
        }

        // снова выведем список всех сотрудников
        getAllEmployees();
    }
}